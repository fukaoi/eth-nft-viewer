{"ast":null,"code":"var _jsxFileName = \"/home/t/Work/My/NFT/getTokens/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageList: []\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const {\n        accounts,\n        contract\n      } = this.state; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 14\n        }\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, \"Good to Go!\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, \"Your Truffle Box is installed and ready.\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, \"Smart Contract Example\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, \"Try changing the value stored on \", /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 44\n      }\n    }, \"line 40\"), \" of App.js.\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, \"The stored value is: \", this.state.storageValue));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/t/Work/My/NFT/getTokens/client/src/App.js"],"names":["React","Component","getWeb3","App","state","imageList","componentDidMount","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","setState","contract","runExample","error","alert","console","methods","set","send","from","response","get","call","storageValue","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BG,KAD0B,GAClB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KADkB;;AAAA,SAG1BC,iBAH0B,GAGN,YAAY;AAC9B,UAAI;AACF;AACA,cAAMC,IAAI,GAAG,MAAML,OAAO,EAA1B,CAFE,CAIF;;AACA,cAAMM,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB,CALE,CAOF;;AACA,cAAMC,SAAS,GAAG,MAAMJ,IAAI,CAACE,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAGC,qBAAqB,CAACC,QAAtB,CAA+BL,SAA/B,CAAxB;AACA,cAAMM,QAAQ,GAAG,IAAIV,IAAI,CAACE,GAAL,CAASS,QAAb,CACfH,qBAAqB,CAACI,GADP,EAEfL,eAAe,IAAIA,eAAe,CAACM,OAFpB,CAAjB,CAVE,CAeF;AACA;;AACA,aAAKC,QAAL,CAAc;AAAEd,UAAAA,IAAF;AAAQC,UAAAA,QAAR;AAAkBc,UAAAA,QAAQ,EAAEL;AAA5B,SAAd,EAAsD,KAAKM,UAA3D;AACD,OAlBD,CAkBE,OAAOC,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,CACF,wEADE,CAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,KA7ByB;;AAAA,SA+B1BD,UA/B0B,GA+Bb,YAAY;AACvB,YAAM;AAAEf,QAAAA,QAAF;AAAYc,QAAAA;AAAZ,UAAyB,KAAKlB,KAApC,CADuB,CAGvB;;AACA,YAAMkB,QAAQ,CAACK,OAAT,CAAiBC,GAAjB,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B;AAAEC,QAAAA,IAAI,EAAEtB,QAAQ,CAAC,CAAD;AAAhB,OAA7B,CAAN,CAJuB,CAMvB;;AACA,YAAMuB,QAAQ,GAAG,MAAMT,QAAQ,CAACK,OAAT,CAAiBK,GAAjB,GAAuBC,IAAvB,EAAvB,CAPuB,CASvB;;AACA,WAAKZ,QAAL,CAAc;AAAEa,QAAAA,YAAY,EAAEH;AAAhB,OAAd;AACD,KA1CyB;AAAA;;AA4C1BI,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAK/B,KAAL,CAAWG,IAAhB,EAAsB;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAP;AACD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iHAJF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDACmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADnC,gBARF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA2B,KAAKH,KAAL,CAAW8B,YAAtC,CAXF,CADF;AAeD;;AA/DyB;;AAkE5B,eAAe/B,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { imageList: []  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}