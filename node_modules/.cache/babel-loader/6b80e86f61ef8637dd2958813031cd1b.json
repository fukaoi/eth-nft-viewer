{"ast":null,"code":"var _jsxFileName = \"/home/t/Work/My/NFT/eth-nft-viewer/client/src/components/App.js\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Web3 from \"web3\";\nimport abi from \"../abi/erc721.json\";\nimport { ajax } from 'rxjs/ajax';\nimport { map } from 'rxjs/operators';\nimport \"./App.css\";\nexport const App = () => {\n  const [state, setState] = useState({\n    imageList: []\n  });\n  state = {\n    imageList: []\n  };\n\n  componentDidMount = async () => {\n    try {\n      const web3 = new Web3('https://mainnet.infura.io/v3/1835809e0e6a4de38eaf1f7afb51e0ec'); // my cry\n      // const address = \"0x273f7f8e6489682df756151f5525576e322d51a3\";\n      // crypto kitty\n      // const address = \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\";\n      // SuperRare\n\n      const address = \"0xb932a70A57673d89f4acfFBE830E8ed7f75Fb9e0\";\n      const ids = ['7391'];\n      let dict = [];\n      let n = 1;\n      const c = new web3.eth.Contract(abi, address);\n\n      for (let i in ids) {\n        const url = await c.methods.tokenURI(ids[i]).call();\n        ajax.getJSON(url).pipe(map(console.log)).subscribe();\n        axios.get(url).then(res => {\n          dict.push( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"item\",\n            style: {\n              display: \"inline-block\"\n            },\n            key: n++,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            src: res['data']['image'],\n            width: \"150\",\n            height: \"150\",\n            border: \"0\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }\n          })));\n          this.setState({\n            imageList: dict\n          });\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 10\n    }\n  }, this.state.imageList);\n};\nexport default App;","map":{"version":3,"sources":["/home/t/Work/My/NFT/eth-nft-viewer/client/src/components/App.js"],"names":["React","useState","axios","Web3","abi","ajax","map","App","state","setState","imageList","componentDidMount","web3","address","ids","dict","n","c","eth","Contract","i","url","methods","tokenURI","call","getJSON","pipe","console","log","subscribe","get","then","res","push","display","error"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,SAAQC,IAAR,QAAmB,WAAnB;AACA,SAAQC,GAAR,QAAkB,gBAAlB;AAEA,OAAO,WAAP;AAEA,OAAO,MAAMC,GAAG,GAAG,MAAO;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC;AAACS,IAAAA,SAAS,EAAE;AAAZ,GAAD,CAAlC;AACAF,EAAAA,KAAK,GAAG;AAACE,IAAAA,SAAS,EAAE;AAAZ,GAAR;;AAEAC,EAAAA,iBAAiB,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,IAAI,GAAG,IAAIT,IAAJ,CAAS,+DAAT,CAAb,CADE,CAGF;AACA;AACA;AACA;AACA;;AACA,YAAMU,OAAO,GAAG,4CAAhB;AACA,YAAMC,GAAG,GAAG,CACV,MADU,CAAZ;AAIA,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIC,CAAC,GAAG,CAAR;AAEA,YAAMC,CAAC,GAAG,IAAIL,IAAI,CAACM,GAAL,CAASC,QAAb,CAAsBf,GAAtB,EAA2BS,OAA3B,CAAV;;AACA,WAAK,IAAIO,CAAT,IAAcN,GAAd,EAAmB;AACjB,cAAMO,GAAG,GAAG,MAAMJ,CAAC,CAACK,OAAF,CAAUC,QAAV,CAAmBT,GAAG,CAACM,CAAD,CAAtB,EAA2BI,IAA3B,EAAlB;AAEAnB,QAAAA,IAAI,CAACoB,OAAL,CAAaJ,GAAb,EAAkBK,IAAlB,CACEpB,GAAG,CAACqB,OAAO,CAACC,GAAT,CADL,EAEEC,SAFF;AAIA3B,QAAAA,KAAK,CAAC4B,GAAN,CAAUT,GAAV,EAAeU,IAAf,CACEC,GAAG,IAAI;AACLjB,UAAAA,IAAI,CAACkB,IAAL,eACE;AACE,YAAA,SAAS,EAAC,MADZ;AAEE,YAAA,KAAK,EAAE;AAACC,cAAAA,OAAO,EAAE;AAAV,aAFT;AAGE,YAAA,GAAG,EAAElB,CAAC,EAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAKE;AAAK,YAAA,GAAG,EAAEgB,GAAG,CAAC,MAAD,CAAH,CAAY,OAAZ,CAAV;AACE,YAAA,KAAK,EAAC,KADR;AAEE,YAAA,MAAM,EAAC,KAFT;AAGE,YAAA,MAAM,EAAC,GAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,CADF;AAaA,eAAKvB,QAAL,CAAc;AAACC,YAAAA,SAAS,EAAEK;AAAZ,WAAd;AACD,SAhBH;AAkBD;AACF,KA3CD,CA2CE,OAAOoB,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd;AACD;AACF,GA/CD;;AAiDA,sBAAO;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsB,KAAK3B,KAAL,CAAWE,SAAjC,CAAP;AACD,CAtDM;AAwDP,eAAeH,GAAf","sourcesContent":["import React, {useState} from \"react\";\nimport axios from \"axios\";\nimport Web3 from \"web3\";\nimport abi from \"../abi/erc721.json\";\nimport {ajax} from 'rxjs/ajax';\nimport {map} from 'rxjs/operators';\n\nimport \"./App.css\";\n\nexport const App = () =>  {\n  const [state, setState] = useState({imageList: []});\n  state = {imageList: []};\n\n  componentDidMount = async () => {\n    try {\n      const web3 = new Web3('https://mainnet.infura.io/v3/1835809e0e6a4de38eaf1f7afb51e0ec');\n\n      // my cry\n      // const address = \"0x273f7f8e6489682df756151f5525576e322d51a3\";\n      // crypto kitty\n      // const address = \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\";\n      // SuperRare\n      const address = \"0xb932a70A57673d89f4acfFBE830E8ed7f75Fb9e0\";\n      const ids = [\n        '7391',\n      ];\n\n      let dict = [];\n      let n = 1;\n\n      const c = new web3.eth.Contract(abi, address);\n      for (let i in ids) {\n        const url = await c.methods.tokenURI(ids[i]).call();\n\n        ajax.getJSON(url).pipe(\n          map(console.log)\n        ).subscribe();\n\n        axios.get(url).then(\n          res => {\n            dict.push(\n              <div\n                className=\"item\"\n                style={{display: \"inline-block\"}}\n                key={n++}\n              >\n                <img src={res['data']['image']}\n                  width=\"150\"\n                  height=\"150\"\n                  border=\"0\"\n                />\n              </div>\n            );\n            this.setState({imageList: dict});\n          }\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return <div className=\"App\">{this.state.imageList}</div>;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}